
AVRASM ver. 2.2.7  C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm Wed Feb 05 00:10:34 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATtiny_DFP\1.1.102\avrasm\inc\tn24adef.inc'
C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm(19): warning: Register r26 already defined by the .DEF directive
C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm(20): warning: Register r27 already defined by the .DEF directive
C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm(21): warning: Register r28 already defined by the .DEF directive
C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm(22): warning: Register r29 already defined by the .DEF directive
C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm(25): warning: Register r30 already defined by the .DEF directive
C:\Users\beat\Documents\bikelight\SW\Bikelight\Bikelight\main.asm(26): warning: Register r31 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATtiny_DFP\1.1.102\avrasm\inc\tn24adef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny24A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "tn24Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATtiny24A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATtiny24A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _TN24ADEF_INC_
                                 #define _TN24ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATtiny24A
                                 #pragma AVRPART ADMIN PART_NAME ATtiny24A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x91
                                 .equ	SIGNATURE_002	= 0x0b
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2
                                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	OCR0B	= 0x3c
                                 .equ	GIMSK	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK0	= 0x39
                                 .equ	TIFR0	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	OCR0A	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	TCCR0B	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	TCCR0A	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	DWDR	= 0x27
                                 .equ	CLKPR	= 0x26
                                 .equ	ICR1L	= 0x24
                                 .equ	ICR1H	= 0x25
                                 .equ	GTCCR	= 0x23
                                 .equ	TCCR1C	= 0x22
                                 .equ	WDTCSR	= 0x21
                                 .equ	PCMSK1	= 0x20
                                 .equ	EEARH	= 0x1f
                                 .equ	EEARL	= 0x1e
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	GPIOR2	= 0x15
                                 .equ	GPIOR1	= 0x14
                                 .equ	GPIOR0	= 0x13
                                 .equ	PCMSK0	= 0x12
                                 .equ	USIBR	= 0x10
                                 .equ	USIDR	= 0x0f
                                 .equ	USISR	= 0x0e
                                 .equ	USICR	= 0x0d
                                 .equ	TIMSK1	= 0x0c
                                 .equ	TIFR1	= 0x0b
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	ADCSRB	= 0x03
                                 .equ	DIDR0	= 0x01
                                 .equ	PRR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Data Register, Port B
                                 .equ	PORTB0	= 0	; 
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; 
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; 
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; 
                                 .equ	PB3	= 3	; For compatibility
                                 
                                 ; DDRB - Data Direction Register, Port B
                                 .equ	DDB0	= 0	; 
                                 .equ	DDB1	= 1	; 
                                 .equ	DDB2	= 2	; 
                                 .equ	DDB3	= 3	; 
                                 
                                 ; PINB - Input Pins, Port B
                                 .equ	PINB0	= 0	; 
                                 .equ	PINB1	= 1	; 
                                 .equ	PINB2	= 2	; 
                                 .equ	PINB3	= 3	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	AINBG	= ACBG	; For compatibility
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR0 - 
                                 .equ	ADC0D	= 0	; ADC 0 Digital input buffer disable
                                 .equ	ADC1D	= 1	; ADC 1 Digital input buffer disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - ADC Multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bit 0
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bit 1
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bit 2
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bit 3
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bit 4
                                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bit 5
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - ADC Control and Status Register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bit 0
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bit 1
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bit 2
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ADLAR	= 4	; ADC Left Adjust Result
                                 .equ	BIN	= 7	; Bipolar Input Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 0
                                 ;.equ	ADC0D	= 0	; ADC0 Digital Input Disable
                                 ;.equ	ADC1D	= 1	; ADC1 Digital Input Disable
                                 .equ	ADC2D	= 2	; ADC2 Digital Input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital Input Disable
                                 .equ	ADC4D	= 4	; ADC4 Digital Input Disable
                                 .equ	ADC5D	= 5	; ADC5 Digital Input Disable
                                 .equ	ADC6D	= 6	; ADC6 Digital Input Disable
                                 .equ	ADC7D	= 7	; ADC7 Digital Input Disable
                                 
                                 
                                 ; ***** USI **************************
                                 ; USIBR - USI Buffer Register
                                 .equ	USIBR0	= 0	; USI Buffer Register bit 0
                                 .equ	USIBR1	= 1	; USI Buffer Register bit 1
                                 .equ	USIBR2	= 2	; USI Buffer Register bit 2
                                 .equ	USIBR3	= 3	; USI Buffer Register bit 3
                                 .equ	USIBR4	= 4	; USI Buffer Register bit 4
                                 .equ	USIBR5	= 5	; USI Buffer Register bit 5
                                 .equ	USIBR6	= 6	; USI Buffer Register bit 6
                                 .equ	USIBR7	= 7	; USI Buffer Register bit 7
                                 
                                 ; USIDR - USI Data Register
                                 .equ	USIDR0	= 0	; USI Data Register bit 0
                                 .equ	USIDR1	= 1	; USI Data Register bit 1
                                 .equ	USIDR2	= 2	; USI Data Register bit 2
                                 .equ	USIDR3	= 3	; USI Data Register bit 3
                                 .equ	USIDR4	= 4	; USI Data Register bit 4
                                 .equ	USIDR5	= 5	; USI Data Register bit 5
                                 .equ	USIDR6	= 6	; USI Data Register bit 6
                                 .equ	USIDR7	= 7	; USI Data Register bit 7
                                 
                                 ; USISR - USI Status Register
                                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                                 .equ	USIDC	= 4	; Data Output Collision
                                 .equ	USIPF	= 5	; Stop Condition Flag
                                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                                 
                                 ; USICR - USI Control Register
                                 .equ	USITC	= 0	; Toggle Clock Port Pin
                                 .equ	USICLK	= 1	; Clock Strobe
                                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 
                                 ; GIMSK - General Interrupt Mask Register
                                 .equ	GICR	= GIMSK	; For compatibility
                                 .equ	PCIE0	= 4	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 5	; Pin Change Interrupt Enable 1
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 
                                 ; GIFR - General Interrupt Flag register
                                 .equ	PCIF0	= 4	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 5	; Pin Change Interrupt Flag 1
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 
                                 ; PCMSK1 - Pin Change Enable Mask 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask Bit 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask Bit 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask Bit 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask Bit 11
                                 
                                 ; PCMSK0 - Pin Change Enable Mask 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask Bit 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask Bit 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask Bit 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask Bit 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask Bit 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask Bit 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask Bit 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask Bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag Register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode bit 0
                                 .equ	WGM01	= 1	; Waveform Generation Mode bit 1
                                 .equ	COM0B0	= 4	; Compare Match Output B Mode bit 0
                                 .equ	COM0B1	= 5	; Compare Match Output B Mode bit 1
                                 .equ	COM0A0	= 6	; Compare Match Output A Mode bit 0
                                 .equ	COM0A1	= 7	; Compare Match Output A Mode bit 1
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select bit 0
                                 .equ	CS01	= 1	; Clock Select bit 1
                                 .equ	CS02	= 2	; Clock Select bit 2
                                 .equ	WGM02	= 3	; Waveform Generation Mode bit 2
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register A
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register B
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/CounterN
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; SPL - Stack Pointer Low
                                 .equ	SP0	= 0	; Stack pointer bit 0
                                 .equ	SP1	= 1	; Stack pointer bit 1
                                 .equ	SP2	= 2	; Stack pointer bit 2
                                 .equ	SP3	= 3	; Stack pointer bit 3
                                 .equ	SP4	= 4	; Stack pointer bit 4
                                 .equ	SP5	= 5	; Stack pointer bit 5
                                 .equ	SP6	= 6	; Stack pointer bit 6
                                 .equ	SP7	= 7	; Stack pointer bit 7
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ BODSE = 2 ; BOD Sleep Enable
                                 .equ	SM0	= 3	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	PUD	= 6	; 
                                 .equ BODS = 7 ; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSI	= 1	; Power Reduction USI
                                 .equ	PRTIM0	= 2	; Power Reduction Timer/Counter0
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	RFLB	= 3	; Read fuse and lock bits
                                 .equ	CTPB	= 4	; Clear temporary page buffer
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lockbit
                                 .equ	LB2	= 1	; Lockbit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock source
                                 .equ	CKSEL1	= 1	; Select Clock source
                                 .equ	CKSEL2	= 2	; Select Clock source
                                 .equ	CKSEL3	= 3	; Select Clock source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock Output Enable
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through the Chip Erase
                                 .equ	WDTON	= 4	; Watchdog Timer always on
                                 .equ	SPIEN	= 5	; Enable Serial Program and Data Downloading
                                 .equ	DWEN	= 6	; DebugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External Reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	SELFPRGEN	= 0	; Self-Programming Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x03ff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 128
                                 .equ	RAMEND	= 0x00df
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x007f
                                 .equ	EEPROMEND	= 0x007f
                                 .equ	EEADRBITS	= 7
                                 #pragma AVRPART MEMORY PROG_FLASH 2048
                                 #pragma AVRPART MEMORY EEPROM 128
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 128
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x0
                                 .equ	NRWW_STOP_ADDR	= 0x3ff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x0
                                 .equ	PAGESIZE	= 16
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	EXT_INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	PCI0addr	= 0x0002	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0003	; Pin Change Interrupt Request 1
                                 .equ	WATCHDOGaddr	= 0x0004	; Watchdog Time-out
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x0009	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x000a	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x000b	; Timer/Counter0 Overflow
                                 .equ	ACIaddr	= 0x000c	; Analog Comparator
                                 .equ	ADCCaddr	= 0x000d	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000e	; EEPROM Ready
                                 .equ	USI_STRaddr	= 0x000f	; USI START
                                 .equ	USI_OVFaddr	= 0x0010	; USI Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 17	; size in words
                                 
                                 #endif  /* _TN24ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Bikelight.asm
                                 ;
                                 ; Created: 26.10.2018 21:02:11
                                 ; Author : beat
                                 ;
                                 
                                 #define BOARD_VERSION 2
                                 
                                 ; register aliases
                                 .def		_CAPTURE_L = r20
                                 .def		_CAPTURE_H = r21
                                 .def		_CAPTURE_PREV_L = r18
                                 .def		_CAPTURE_PREV_H = r19
                                 .def		_SPEED_L = r24
                                 .def		_SPEED_H = r25
                                 .def		_SPEED_PREV_L = r22
                                 .def		_SPEED_PREV_H = r23
                                 .def		_PULSES_L = r26
                                 .def		_PULSES_H = r27
                                 .def		_PULSES_PREV_L = r28
                                 .def		_PULSES_PREV_H = r29
                                 .def		WR_L = r16
                                 .def		WR_H = r17
                                 .def		_WR_L = r30
                                 .def		_WR_H = r31
                                 .def		_SREG_BUP = r0
                                 
                                 ; Interrupt jump vector table
                                 .org 0x000
000000 c037                      	rjmp	RESET
000001 c036                      	rjmp	EXT_INT0
000002 c035                      	rjmp	PC_INT0
000003 c034                      	rjmp	PC_INT1
000004 c033                      	rjmp	WDT
000005 c00b                      	rjmp	TIM1_CAPT
000006 c031                      	rjmp	TIM1_COMPA
000007 c030                      	rjmp	TIM1_COMPB
000008 c020                      	rjmp	TIM1_OVF
000009 c02e                      	rjmp	TIM0_COMPA
00000a c02d                      	rjmp	TIM0_COMPB
00000b c02c                      	rjmp	TIM0_OVF
00000c c02b                      	rjmp	ANA_COMP
00000d c01f                      	rjmp	ADC_CC
00000e c029                      	rjmp	EE_RDY
00000f c028                      	rjmp	USI_STR
000010 c027                      	rjmp	USI_OVF
                                 
                                 ; Timer input capture routine, change backlight power based on delay
                                 TIM1_CAPT:
                                 	; Save status register
000011 b60f                      	in		_SREG_BUP, SREG
                                 
                                 	; For debugging toggle pin A5
000012 e2e0                      	ldi		_WR_L, (1<<PA5)
000013 bbe9                      	out		PINA, _WR_L
                                 
                                 	; Read data from timer
000014 b544                      	in		_CAPTURE_L, ICR1L
000015 b555                      	in		_CAPTURE_H, ICR1H
                                 	; _SPEED = _CAPTURE - CAPTURE_PREV
000016 01ca                      	movw	_SPEED_L, _CAPTURE_L
000017 1b82                      	sub		_SPEED_L, _CAPTURE_PREV_L
000018 0b93                      	sbc		_SPEED_H, _CAPTURE_PREV_H
                                 
                                 	; if _PULSES_PREV < 20 {} else goto TIM1_CAPT_END
000019 01fe                      	movw	_WR_L, _PULSES_PREV_L
00001a 9774                      	sbiw	_WR_L, 20
00001b f440                      	brcc	TIM1_CAPT_END
                                 
                                 	; Comparison with 16bit
00001c 0786                      	cpc		_SPEED_L, _SPEED_PREV_L
00001d 0797                      	cpc		_SPEED_H, _SPEED_PREV_H
00001e f418                      	brsh	TIM1_CAPT_SLOW ; branch if _SPEED > _SPEED_PREV
                                 
                                 	; speed up or same
                                 	; Back 30%
00001f e4ef                      	ldi		_WR_L, 0x4f
000020 bfec                      	out		OCR0B, _WR_L
000021 c002                      	rjmp	TIM1_CAPT_END
                                 	; slow down
                                 TIM1_CAPT_SLOW:
                                 	; Back 100%
000022 efef                      	ldi		_WR_L, 0xff
000023 bfec                      	out		OCR0B, _WR_L
                                 TIM1_CAPT_END:
                                 	; 
000024 01bc                      	movw	_SPEED_PREV_L, _SPEED_L
000025 019a                      	movw	_CAPTURE_PREV_L, _CAPTURE_L
000026 9611                      	adiw	_PULSES_L, 1
                                 	; restore SREG
000027 be0f                      	out		SREG, _SREG_BUP
000028 9518                      	reti
                                 
                                 ; Timer1 overflow interrupt, increment counter for 32 bit value
                                 TIM1_OVF:
                                 	; Use to increase max time to 0.5s roughly (16bit value)
000029 b60f                      	in		_SREG_BUP, SREG
00002a 9601                      	adiw	_SPEED_L, 1
00002b be0f                      	out		SREG, _SREG_BUP
00002c 9518                      	reti
                                 
                                 ADC_CC:
                                 	; read in supply voltage based on value for 1.1V Bgap
                                 	; go to low power mode if ADCH > 94 (left adjusted) -> Vin < 3
00002d b60f                      	in		_SREG_BUP, SREG
00002e b1e5                      	in		_WR_L, ADCH
00002f 35ee                      	cpi		_WR_L, 94
000030 f028                      	brlo	ADC_END
                                 	; reduce pwm for low power mode
000031 e1e5                      	ldi		_WR_L, 0x15
000032 bfe6                      	out		OCR0A, _WR_L
000033 bfec                      	out		OCR0B, _WR_L
000034 be0f                      	out		SREG, _SREG_BUP
000035 9518                      	reti
                                 ADC_END: 
                                 	; Do nothing (normal mode)
000036 be0f                      	out		SREG, _SREG_BUP
000037 9518                      	reti
                                 
                                 EXT_INT0:
                                 PC_INT0:
                                 PC_INT1:
                                 WDT:
                                 TIM1_COMPA:
                                 TIM1_COMPB:
                                 TIM0_COMPA:
                                 TIM0_COMPB:
                                 TIM0_OVF:
                                 ANA_COMP:
                                 EE_RDY:
                                 USI_STR:
                                 USI_OVF:
                                 
                                 RESET:
                                 	; Initialize Stack (not enough memory for SPH)
000038 ed0f                      	ldi		WR_L, low(RAMEND)
000039 bf0d                      	out		SPL, WR_L
                                 
                                 	; Power
                                 	; Power reduction (serial interface)
00003a e002                      	ldi		WR_L, (1<<PRUSI)
00003b b900                      	out		PRR, WR_L
                                 
                                 	; GPIO
                                 	; Define PORTB (!Reset, CtrlF, NC, NC)
00003c e00b                      	ldi		WR_L, (1<<PB3)|(1<<PB1)|(1<<PB0)
00003d e014                      	ldi		WR_H, (1<<DDB2)
00003e bb08                      	out		PORTB, WR_L
00003f bb17                      	out		DDRB, WR_H
                                 	; Define PORTA (CtrlB, NC, NC, NC, DCDC, FreqIn, NC, NC)
000040 e407                      	ldi		WR_L, (1<<ADC6D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D)
000041 b901                      	out		DIDR0, WR_L
000042 e403                      	ldi		WR_L, (1<<PA6)|(1<<PA1)|(1<<PA0)
000043 eb18                      	ldi		WR_H, (1<<DDA7)|(1<<DDA5)|(1<<DDA4)|(1<<DDA3)
000044 bb0b                      	out		PORTA, WR_L
000045 bb1a                      	out		DDRA, WR_H
                                 
                                 	; Analog Comparator
                                 	; Analog comparator input capture, Internal 1v1 bgap falling edge -> input rising above 1.1V
000046 e502                      	ldi		WR_L, (1<<ACBG)|(1<<ACI)|(2<<ACIS0)
000047 b908                      	out		ACSR, WR_L
                                 	; Erase pending interrupts
000048 b108                      	in		WR_L, ACSR
000049 b908                      	out		ACSR, WR_L
                                 	; Enable input capture on Timer 1
00004a 9a42                      	sbi		ACSR, ACIC
                                 
                                 	; Timer
                                 	; Timer1 (freq in / speed)
                                 	; Normal mode (16bit), NoiseCanceler active, falling edge, 8 prescaler (2 Hz)
                                 	; Overflow (2^16) and ICP interrupt enabled
                                 
                                 	; Init with prev slow speed
00004b ef7f                      	ldi		_SPEED_PREV_H, 0xff
                                 	; Clear inputCapture register
00004c 2700                      	clr		WR_L
00004d bd05                      	out		ICR1H, WR_L
00004e bd04                      	out		ICR1L, WR_L
                                 	; IC enabled, NC enabled, 8 prescaler, FastPWM 8bit
00004f e000                      	ldi		WR_L, 0x00
000050 bd0f                      	out		TCCR1A, WR_L
000051 e802                      	ldi		WR_L, (1<<ICNC1)|(2<<CS10)
000052 bd0e                      	out		TCCR1B, WR_L
                                 	; clear pending interrupts timer1
000053 b10b                      	in		WR_L, TIFR1
000054 b90b                      	out		TIFR1, WR_L
                                 	; Input capture and overflow interrupt of timer1
000055 e201                      	ldi		WR_L, (1<<ICIE1)|(1<<TOIE1)
000056 b90c                      	out		TIMSK1, WR_L
                                 
                                 	; Timer0 (PWM)
                                 	; PWM Output for LED control (roughly 245 Hz for 1 MHz)
                                 	; Phase correct PWM, 8 prescaler
                                 
                                 	; 100% (255) for front
000057 ef0f                      	ldi		WR_L, 0xff
000058 bf06                      	out		OCR0A, WR_L
                                 	; 31% (79) for back
000059 e40f                      	ldi		WR_L, 0x4f
00005a bf0c                      	out		OCR0B, WR_L
                                 	; no interrupts
00005b e000                      	ldi		WR_L, 0x00
00005c bf09                      	out		TIMSK0, WR_L
                                 	; PWM output A and B enabled, 8bit phase correct PWM
00005d ea01                      	ldi		WR_L, (2<<COM0A0)|(2<<COM0B0)|(1<<WGM00)
00005e bf00                      	out		TCCR0A, WR_L
                                 	; 8 prescaler
00005f e002                      	ldi		WR_L, (2<<CS00)
000060 bf03                      	out		TCCR0B, WR_L
                                 
                                 	; ADC VoltageMeasurement
                                 	; Vcc as reference, 1.1V BandGap as measurement, autotrigger by 500Hz Timer1, left adjust
000061 e201                      	ldi		WR_L, (1<<MUX5)|(1<<MUX0)
000062 b907                      	out		ADMUX, WR_L
000063 e105                      	ldi		WR_L, (1<<ADLAR)|(1<<ADTS2)|(ADTS1)
000064 b903                      	out		ADCSRB, WR_L
000065 eb0b                      	ldi		WR_L, (1<<ADEN)|(1<<ADATE)|(1<<ADIF)|(1<<ADIE)|(1<<ADPS1)|(1<<ADPS0)
000066 b906                      	out		ADCSRA, WR_L
                                 
                                 	; Enable interrupts
000067 9478                      	sei
                                 
                                 	; Main loop (empty or sleep)
                                 MAIN:
000068 cfff                      	rjmp	MAIN
                                 
                                 ;	ldi		WR_L, (1<<SE)
                                 ;	out		MCUCR, WR_L
                                 ;	sleep
                                 ;	clr		WR_L
                                 ;	out		MCUCR, WR_L
                                 ;   rjmp	MAIN


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny24A" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   7 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  41 r17:   4 r18:   2 r19:   1 r20:   3 
r21:   1 r22:   2 r23:   2 r24:   5 r25:   2 r26:   1 r27:   0 r28:   1 
r29:   0 r30:  13 r31:   0 
Registers used: 14 out of 35 (40.0%)

"ATtiny24A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   2 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :   0 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 
clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   2 cpi   :   1 
cpse  :   0 dec   :   0 eor   :   0 icall :   0 ijmp  :   0 in    :   8 
inc   :   0 ld    :   0 ldd   :   0 ldi   :  24 lds   :   0 lpm   :   0 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   4 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  32 pop   :   0 push  :   0 rcall :   0 
ret   :   0 reti  :   4 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   0 sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   0 std   :   0 sts   :   0 sub   :   1 subi  :   0 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 18 out of 105 (17.1%)

"ATtiny24A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0000d2    210      0    210    2048  10.3%
[.dseg] 0x000060 0x000060      0      0      0     128   0.0%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 6 warnings
